<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true">

    <!--水果标题栏-->
    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBar"
        android:layout_width="match_parent"
        android:layout_height="250dp"
        android:fitsSystemWindows="true">

        <!--实现一个可折叠式标题栏的效果，这需要借助CollapsingToolbarLayout-->
        <!--app:contentScrim属性用于指定CollapsingToolbarLayout 在趋于折叠状态以及折叠之后的背景色，其实CollapsingT oolbarLayout 在折叠之后就是一个普通的Toolbar ，那么背景色肯定应该是colorPrimary了-->
        <!--app:layout_scrollFlags属性我们也是见过的，只不过之前是给Toolbar 指定的，现在也移到外面来了。其中，scroll表示CollapsingT oolbarLayout 会随着水果内容详情的滚动一起滚动，exitUntilCollapsed表示当CollapsingToolbarLayout 随着滚动完成折叠之后就保留在界面上，不再移出屏幕-->
        <com.google.android.material.appbar.CollapsingToolbarLayout
            android:id="@+id/collapsingToolbar"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
            app:contentScrim="@color/purple_500"
            app:layout_scrollFlags="scroll|exitUntilCollapsed"
            android:fitsSystemWindows="true">

            <!--app:layout_collapseMode比较陌生。它用于指定当前控件在CollapsingToolbarLayout 折叠过程中的折叠模式
            其中Toolbar 指定成pin，表示在折叠的过程中位置始终保持不变
            ImageV iew指定成parallax ，表示会在折叠的过程中产生一定的错位偏移，这种模式的视觉效果会非常好-->
            <!--android:fitsSystemWindows属性指定成true，就表示该控件会出现在系统状态栏里
            ImageView设置这个属性,背景图能够和系统状态栏融合.
            不过只给ImageV iew设置这个属性是没有用的，我们必须将ImageView布局结构中的所有父布局都设置上这个属性才可以-->
            <ImageView
                android:id="@+id/fruitImageView"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                app:layout_collapseMode="parallax"
                android:fitsSystemWindows="true"/>
            <androidx.appcompat.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"/>
        </com.google.android.material.appbar.CollapsingToolbarLayout>
    </com.google.android.material.appbar.AppBarLayout>

    <!--水果内容详情-->
    <!--ScrollView允许使用滚动的方式来查看屏幕以外的数据，而NestedScrollView在此基础之上还增加了嵌套响应滚动事件的功能-->
    <!--由于CoordinatorLayout 本身已经可以响应滚动事件了，因此我们在它的内部就需要使用NestedScrollView或RecyclerView这样的布局-->
    <!--app:layout_behavior属性指定了一个布局行为，这和之前在RecyclerView中的用法是一模一样的-->
    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <!--不管是ScrollView还是NestedScr ollView，它们的内部都只允许存在一个直接子布局。因此，如果我们想要在里面放入很多东西的话，通常会先嵌套一个LinearLayout ，然后再在LinearLayout 中放入具体的内容就可以了-->
        <LinearLayout
            android:orientation="vertical"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <com.google.android.material.card.MaterialCardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="15dp"
                android:layout_marginLeft="15dp"
                android:layout_marginRight="15dp"
                android:layout_marginTop="35dp"
                app:cardCornerRadius="4dp">
                <TextView
                    android:id="@+id/fruitContentText"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_margin="10dp"/>
            </com.google.android.material.card.MaterialCardView>
        </LinearLayout>
    </androidx.core.widget.NestedScrollView>

    <!--app:layout_anchor属性指定了一个锚点，我们将锚点设置为AppBarLayout ，这样悬浮按钮就会出现在水果标题栏的区域内-->
    <!--app:layout_anchorGravity属性将悬浮按钮定位在标题栏区域的右下角-->
    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:src="@drawable/ic_comment"
        app:layout_anchor="@id/appBar"
        app:layout_anchorGravity="bottom|end"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>